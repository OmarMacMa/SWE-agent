# agent:
#   model:
#     name: "ollama/qwen2.5-coder:7B"
#     api_base: "http://localhost:11434"
#     per_instance_cost_limit: 15
#     total_cost_limit: 0
#     per_instance_call_limit: 100
#     max_input_tokens: 0
#   tools:
#     parse_function:
#       type: "thought_action"
#       # Add these parameters to handle the <think> tags
#       thought_tag: "think"  # Tell it to expect <think> tags
#       action_tag: "action"  # or whatever tag contains the actual action
#       strip_thought: true   # Remove the thought content from processing

agent:
  model:
    # name: "ollama/qwen2.5-coder:7B"
    # api_base: "http://localhost:11434"
    name: "azure/gpt-4"  
    api_base: "https://a0163-mb9o4zpc-eastus2.cognitiveservices.azure.com/"
    api_key: "${AZURE_OPENAI_API_KEY}"
    api_version: "2025-01-01-preview"
    per_instance_cost_limit: 15
    total_cost_limit: 0
    per_instance_call_limit: 100
    max_input_tokens: 0
  templates:
    system_template: |-
      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.

      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.
      In addition to typical bash commands, you can also use specific commands to help you navigate and edit files.

      CRITICAL FORMATTING RULES:
      - Your response must have exactly this format: DISCUSSION text, then ONE command in triple backticks
      - DO NOT use ```bash or any language identifier after the triple backticks
      - DO NOT include file trees, directory structures, or any other output
      - DO NOT use "Tool Call:", "Function Call:", or any headers
      - DO NOT use multiple commands
      - DO NOT include any markdown formatting

      CORRECT RESPONSE FORMAT:
      I will search for the tribonacci function to understand the issue.
      ```
      find_file "tribonacci"
      ```

      WRONG RESPONSE FORMAT (DO NOT DO THIS):
      ```bash
      find_file "tribonacci"
      ```
      
      WRONG (DO NOT DO THIS):
      Let me find the file.
      ```bash
      find_file "tribonacci"
      ```
      Tree structure here...

      AVAILABLE COMMANDS:
      - ls: List directory contents
      - find_file "filename": Find files by name (just the filename, not the path)
      - open path/to/file: Open a file for viewing/editing
      - edit "search_string" "replace_string": Edit the currently open file
      - python script.py: Run Python scripts
      - submit: Submit your solution

      COMMAND USAGE EXAMPLES:
      To find a file named tribonacci.py:
      ```
      find_file "tribonacci.py"
      ```

      To open a file at a specific path:
      ```
      open testpkg/tribonacci.py
      ```

      To edit a file (requires proper indentation and quotes):
      ```
      edit "    print(\"Hello world\")" "    print(\"Hello\")\n    print(\"world\")"
      ```

      IMPORTANT: 
      - find_file takes ONLY the filename, not the full path
      - Use ls to explore directory structure
      - Use open with the full path to open files

      REMEMBER:
      - Always include BOTH search and replace arguments in quotes
      - Match exact indentation in your search string
      - Include proper indentation in your replace string
      - ONE command per response
      - Wait for the result before your next command

      First, you should always include a general thought about what you're going to do next.
      Then, you must include exactly ONE command in triple backticks (no language identifier).

      (Open file: <path>)
      (Current directory: <cwd>)
      bash-$
    instance_template: |-
      We're currently solving the following issue within our repository. Here's the issue text:
      ISSUE:
      {{problem_statement}}

      INSTRUCTIONS:
      You will solve this issue step by step. Your terminal session has started in the repository's root directory.

      RESPONSE FORMAT REMINDER:
      - Write your reasoning/discussion first
      - Then include exactly ONE command in triple backticks (no ```bash, just ```)
      - Wait for the response before continuing
      - Do not include file trees, directory listings, or extra output

      STRATEGY:
      1. Start by exploring the repository structure with ls
      2. Find files using find_file "filename" (filename only, not paths)
      3. Open files with open path/to/file
      4. Reproduce the bug described in the issue
      5. Make necessary edits and test your changes
      6. Submit when satisfied

      EXAMPLE WORKFLOW:
      First explore the repository structure:
      ```
      ls
      ```
      
      Then find relevant files by name:
      ```
      find_file "filename.py"
      ```
      
      Then open the file using the path shown in find results:
      ```
      open path/to/filename.py
      ```

      IMPORTANT EDITING TIPS:
      - Indentation matters! Match the exact spacing when editing
      - Always verify your edits worked by viewing the file again
      - Test edge cases after making changes
      - Use the submit command when you're done

      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_template: |-
      {{observation}}
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_no_output_template: |-
      Your command ran successfully and did not produce any output.
      (Open file: {{open_file}})
      (Current directory: {{working_dir}})
      bash-$
    demonstration_template: |
      Here is a demonstration of how to correctly accomplish this task.
      It is included to show you how to correctly use the interface.
      You do not need to follow exactly what is done in the demonstration.
      --- DEMONSTRATION ---
      {{demonstration}}
      --- END OF DEMONSTRATION ---
  tools:
    env_variables:
      WINDOW: 100
      OVERLAP: 2
    bundles:
      - path: tools/registry
      - path: tools/defaults
      - path: tools/search
      - path: tools/edit_replace
      - path: tools/submit
    parse_function:
      type: thought_action
  history_processors:
    - type: last_n_observations
      n: 5
env:
  repo:
    github_url: https://github.com/SWE-agent/test-repo   
problem_statement:
  github_url: "https://github.com/SWE-agent/test-repo/issues/22"